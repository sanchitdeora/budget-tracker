// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sanchitdeora/budget-tracker/db (interfaces: Database)

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sanchitdeora/budget-tracker/models"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteBillRecordById mocks base method.
func (m *MockDatabase) DeleteBillRecordById(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBillRecordById", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBillRecordById indicates an expected call of DeleteBillRecordById.
func (mr *MockDatabaseMockRecorder) DeleteBillRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBillRecordById", reflect.TypeOf((*MockDatabase)(nil).DeleteBillRecordById), arg0, arg1)
}

// DeleteBudgetRecordById mocks base method.
func (m *MockDatabase) DeleteBudgetRecordById(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudgetRecordById", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBudgetRecordById indicates an expected call of DeleteBudgetRecordById.
func (mr *MockDatabaseMockRecorder) DeleteBudgetRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudgetRecordById", reflect.TypeOf((*MockDatabase)(nil).DeleteBudgetRecordById), arg0, arg1)
}

// DeleteGoalRecordById mocks base method.
func (m *MockDatabase) DeleteGoalRecordById(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGoalRecordById", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGoalRecordById indicates an expected call of DeleteGoalRecordById.
func (mr *MockDatabaseMockRecorder) DeleteGoalRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGoalRecordById", reflect.TypeOf((*MockDatabase)(nil).DeleteGoalRecordById), arg0, arg1)
}

// DeleteTransactionRecordById mocks base method.
func (m *MockDatabase) DeleteTransactionRecordById(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionRecordById", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionRecordById indicates an expected call of DeleteTransactionRecordById.
func (mr *MockDatabaseMockRecorder) DeleteTransactionRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionRecordById", reflect.TypeOf((*MockDatabase)(nil).DeleteTransactionRecordById), arg0, arg1)
}

// GetAllBillRecords mocks base method.
func (m *MockDatabase) GetAllBillRecords(arg0 context.Context) (*[]models.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBillRecords", arg0)
	ret0, _ := ret[0].(*[]models.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBillRecords indicates an expected call of GetAllBillRecords.
func (mr *MockDatabaseMockRecorder) GetAllBillRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBillRecords", reflect.TypeOf((*MockDatabase)(nil).GetAllBillRecords), arg0)
}

// GetAllBudgetRecords mocks base method.
func (m *MockDatabase) GetAllBudgetRecords(arg0 context.Context, arg1 *[]models.Budget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBudgetRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllBudgetRecords indicates an expected call of GetAllBudgetRecords.
func (mr *MockDatabaseMockRecorder) GetAllBudgetRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBudgetRecords", reflect.TypeOf((*MockDatabase)(nil).GetAllBudgetRecords), arg0, arg1)
}

// GetAllGoalRecords mocks base method.
func (m *MockDatabase) GetAllGoalRecords(arg0 context.Context, arg1 *[]models.Goal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGoalRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllGoalRecords indicates an expected call of GetAllGoalRecords.
func (mr *MockDatabaseMockRecorder) GetAllGoalRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGoalRecords", reflect.TypeOf((*MockDatabase)(nil).GetAllGoalRecords), arg0, arg1)
}

// GetAllTransactionRecords mocks base method.
func (m *MockDatabase) GetAllTransactionRecords(arg0 context.Context) (*[]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactionRecords", arg0)
	ret0, _ := ret[0].(*[]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactionRecords indicates an expected call of GetAllTransactionRecords.
func (mr *MockDatabaseMockRecorder) GetAllTransactionRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactionRecords", reflect.TypeOf((*MockDatabase)(nil).GetAllTransactionRecords), arg0)
}

// GetAllTransactionRecordsByDateRange mocks base method.
func (m *MockDatabase) GetAllTransactionRecordsByDateRange(arg0 context.Context, arg1, arg2 time.Time) (*[]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactionRecordsByDateRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactionRecordsByDateRange indicates an expected call of GetAllTransactionRecordsByDateRange.
func (mr *MockDatabaseMockRecorder) GetAllTransactionRecordsByDateRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactionRecordsByDateRange", reflect.TypeOf((*MockDatabase)(nil).GetAllTransactionRecordsByDateRange), arg0, arg1, arg2)
}

// GetBillRecordById mocks base method.
func (m *MockDatabase) GetBillRecordById(arg0 context.Context, arg1 string) (*models.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillRecordById", arg0, arg1)
	ret0, _ := ret[0].(*models.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillRecordById indicates an expected call of GetBillRecordById.
func (mr *MockDatabaseMockRecorder) GetBillRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillRecordById", reflect.TypeOf((*MockDatabase)(nil).GetBillRecordById), arg0, arg1)
}

// GetBudgetRecordById mocks base method.
func (m *MockDatabase) GetBudgetRecordById(arg0 context.Context, arg1 string) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetRecordById", arg0, arg1)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetRecordById indicates an expected call of GetBudgetRecordById.
func (mr *MockDatabaseMockRecorder) GetBudgetRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetRecordById", reflect.TypeOf((*MockDatabase)(nil).GetBudgetRecordById), arg0, arg1)
}

// GetGoalRecordById mocks base method.
func (m *MockDatabase) GetGoalRecordById(arg0 context.Context, arg1 string) (*models.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoalRecordById", arg0, arg1)
	ret0, _ := ret[0].(*models.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoalRecordById indicates an expected call of GetGoalRecordById.
func (mr *MockDatabaseMockRecorder) GetGoalRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoalRecordById", reflect.TypeOf((*MockDatabase)(nil).GetGoalRecordById), arg0, arg1)
}

// GetTransactionRecordById mocks base method.
func (m *MockDatabase) GetTransactionRecordById(arg0 context.Context, arg1 string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionRecordById", arg0, arg1)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionRecordById indicates an expected call of GetTransactionRecordById.
func (mr *MockDatabaseMockRecorder) GetTransactionRecordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionRecordById", reflect.TypeOf((*MockDatabase)(nil).GetTransactionRecordById), arg0, arg1)
}

// InsertBillRecord mocks base method.
func (m *MockDatabase) InsertBillRecord(arg0 context.Context, arg1 models.Bill) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBillRecord", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBillRecord indicates an expected call of InsertBillRecord.
func (mr *MockDatabaseMockRecorder) InsertBillRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBillRecord", reflect.TypeOf((*MockDatabase)(nil).InsertBillRecord), arg0, arg1)
}

// InsertBudgetRecord mocks base method.
func (m *MockDatabase) InsertBudgetRecord(arg0 context.Context, arg1 models.Budget) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBudgetRecord", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBudgetRecord indicates an expected call of InsertBudgetRecord.
func (mr *MockDatabaseMockRecorder) InsertBudgetRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBudgetRecord", reflect.TypeOf((*MockDatabase)(nil).InsertBudgetRecord), arg0, arg1)
}

// InsertGoalRecord mocks base method.
func (m *MockDatabase) InsertGoalRecord(arg0 context.Context, arg1 models.Goal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGoalRecord", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGoalRecord indicates an expected call of InsertGoalRecord.
func (mr *MockDatabaseMockRecorder) InsertGoalRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGoalRecord", reflect.TypeOf((*MockDatabase)(nil).InsertGoalRecord), arg0, arg1)
}

// InsertTransactionRecord mocks base method.
func (m *MockDatabase) InsertTransactionRecord(arg0 context.Context, arg1 models.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactionRecord", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransactionRecord indicates an expected call of InsertTransactionRecord.
func (mr *MockDatabaseMockRecorder) InsertTransactionRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionRecord", reflect.TypeOf((*MockDatabase)(nil).InsertTransactionRecord), arg0, arg1)
}

// UpdateBillRecordById mocks base method.
func (m *MockDatabase) UpdateBillRecordById(arg0 context.Context, arg1 string, arg2 models.Bill) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillRecordById", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillRecordById indicates an expected call of UpdateBillRecordById.
func (mr *MockDatabaseMockRecorder) UpdateBillRecordById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillRecordById", reflect.TypeOf((*MockDatabase)(nil).UpdateBillRecordById), arg0, arg1, arg2)
}

// UpdateBillRecordIsPaid mocks base method.
func (m *MockDatabase) UpdateBillRecordIsPaid(arg0 context.Context, arg1 string, arg2 time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillRecordIsPaid", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillRecordIsPaid indicates an expected call of UpdateBillRecordIsPaid.
func (mr *MockDatabaseMockRecorder) UpdateBillRecordIsPaid(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillRecordIsPaid", reflect.TypeOf((*MockDatabase)(nil).UpdateBillRecordIsPaid), arg0, arg1, arg2)
}

// UpdateBillRecordIsUnpaid mocks base method.
func (m *MockDatabase) UpdateBillRecordIsUnpaid(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillRecordIsUnpaid", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillRecordIsUnpaid indicates an expected call of UpdateBillRecordIsUnpaid.
func (mr *MockDatabaseMockRecorder) UpdateBillRecordIsUnpaid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillRecordIsUnpaid", reflect.TypeOf((*MockDatabase)(nil).UpdateBillRecordIsUnpaid), arg0, arg1)
}

// UpdateBudgetRecordById mocks base method.
func (m *MockDatabase) UpdateBudgetRecordById(arg0 context.Context, arg1 string, arg2 models.Budget) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBudgetRecordById", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBudgetRecordById indicates an expected call of UpdateBudgetRecordById.
func (mr *MockDatabaseMockRecorder) UpdateBudgetRecordById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBudgetRecordById", reflect.TypeOf((*MockDatabase)(nil).UpdateBudgetRecordById), arg0, arg1, arg2)
}

// UpdateGoalRecordById mocks base method.
func (m *MockDatabase) UpdateGoalRecordById(arg0 context.Context, arg1 string, arg2 models.Goal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGoalRecordById", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGoalRecordById indicates an expected call of UpdateGoalRecordById.
func (mr *MockDatabaseMockRecorder) UpdateGoalRecordById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGoalRecordById", reflect.TypeOf((*MockDatabase)(nil).UpdateGoalRecordById), arg0, arg1, arg2)
}

// UpdateTransactionRecordById mocks base method.
func (m *MockDatabase) UpdateTransactionRecordById(arg0 context.Context, arg1 string, arg2 models.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionRecordById", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionRecordById indicates an expected call of UpdateTransactionRecordById.
func (mr *MockDatabaseMockRecorder) UpdateTransactionRecordById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionRecordById", reflect.TypeOf((*MockDatabase)(nil).UpdateTransactionRecordById), arg0, arg1, arg2)
}
