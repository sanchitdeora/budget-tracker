// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sanchitdeora/budget-tracker/pkg/budget (interfaces: Service)

// Package mock_budget is a generated GoMock package.
package mock_budget

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sanchitdeora/budget-tracker/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BudgetMaintainer mocks base method.
func (m *MockService) BudgetMaintainer(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BudgetMaintainer", arg0)
}

// BudgetMaintainer indicates an expected call of BudgetMaintainer.
func (mr *MockServiceMockRecorder) BudgetMaintainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BudgetMaintainer", reflect.TypeOf((*MockService)(nil).BudgetMaintainer), arg0)
}

// CreateBudgetByUser mocks base method.
func (m *MockService) CreateBudgetByUser(arg0 context.Context, arg1 *models.Budget) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudgetByUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudgetByUser indicates an expected call of CreateBudgetByUser.
func (mr *MockServiceMockRecorder) CreateBudgetByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudgetByUser", reflect.TypeOf((*MockService)(nil).CreateBudgetByUser), arg0, arg1)
}

// CreateRecurringBudget mocks base method.
func (m *MockService) CreateRecurringBudget(arg0 context.Context, arg1 *models.Budget) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecurringBudget", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecurringBudget indicates an expected call of CreateRecurringBudget.
func (mr *MockServiceMockRecorder) CreateRecurringBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecurringBudget", reflect.TypeOf((*MockService)(nil).CreateRecurringBudget), arg0, arg1)
}

// DeleteBudgetById mocks base method.
func (m *MockService) DeleteBudgetById(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudgetById", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBudgetById indicates an expected call of DeleteBudgetById.
func (mr *MockServiceMockRecorder) DeleteBudgetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudgetById", reflect.TypeOf((*MockService)(nil).DeleteBudgetById), arg0, arg1)
}

// GetBudgetById mocks base method.
func (m *MockService) GetBudgetById(arg0 context.Context, arg1 string) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetById", arg0, arg1)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetById indicates an expected call of GetBudgetById.
func (mr *MockServiceMockRecorder) GetBudgetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetById", reflect.TypeOf((*MockService)(nil).GetBudgetById), arg0, arg1)
}

// GetBudgets mocks base method.
func (m *MockService) GetBudgets(arg0 context.Context) (*[]models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgets", arg0)
	ret0, _ := ret[0].(*[]models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgets indicates an expected call of GetBudgets.
func (mr *MockServiceMockRecorder) GetBudgets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgets", reflect.TypeOf((*MockService)(nil).GetBudgets), arg0)
}

// UpdateBudgetById mocks base method.
func (m *MockService) UpdateBudgetById(arg0 context.Context, arg1 string, arg2 *models.Budget) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBudgetById", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBudgetById indicates an expected call of UpdateBudgetById.
func (mr *MockServiceMockRecorder) UpdateBudgetById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBudgetById", reflect.TypeOf((*MockService)(nil).UpdateBudgetById), arg0, arg1, arg2)
}

// UpdateBudgetIsClosed mocks base method.
func (m *MockService) UpdateBudgetIsClosed(arg0 context.Context, arg1 string, arg2 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBudgetIsClosed", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBudgetIsClosed indicates an expected call of UpdateBudgetIsClosed.
func (mr *MockServiceMockRecorder) UpdateBudgetIsClosed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBudgetIsClosed", reflect.TypeOf((*MockService)(nil).UpdateBudgetIsClosed), arg0, arg1, arg2)
}
