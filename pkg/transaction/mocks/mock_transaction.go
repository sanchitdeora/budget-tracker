// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sanchitdeora/budget-tracker/pkg/transaction (interfaces: Service)

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sanchitdeora/budget-tracker/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockService) CreateTransaction(arg0 context.Context, arg1 *models.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockServiceMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockService)(nil).CreateTransaction), arg0, arg1)
}

// DeleteTransactionById mocks base method.
func (m *MockService) DeleteTransactionById(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionById", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionById indicates an expected call of DeleteTransactionById.
func (mr *MockServiceMockRecorder) DeleteTransactionById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionById", reflect.TypeOf((*MockService)(nil).DeleteTransactionById), arg0, arg1)
}

// GetTransactionById mocks base method.
func (m *MockService) GetTransactionById(arg0 context.Context, arg1 string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionById", arg0, arg1)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionById indicates an expected call of GetTransactionById.
func (mr *MockServiceMockRecorder) GetTransactionById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionById", reflect.TypeOf((*MockService)(nil).GetTransactionById), arg0, arg1)
}

// GetTransactions mocks base method.
func (m *MockService) GetTransactions(arg0 context.Context) (*[]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", arg0)
	ret0, _ := ret[0].(*[]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockServiceMockRecorder) GetTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockService)(nil).GetTransactions), arg0)
}

// GetTransactionsByDate mocks base method.
func (m *MockService) GetTransactionsByDate(arg0 context.Context, arg1, arg2 time.Time) (*[]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByDate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByDate indicates an expected call of GetTransactionsByDate.
func (mr *MockServiceMockRecorder) GetTransactionsByDate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByDate", reflect.TypeOf((*MockService)(nil).GetTransactionsByDate), arg0, arg1, arg2)
}

// UpdateTransactionById mocks base method.
func (m *MockService) UpdateTransactionById(arg0 context.Context, arg1 string, arg2 *models.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionById", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionById indicates an expected call of UpdateTransactionById.
func (mr *MockServiceMockRecorder) UpdateTransactionById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionById", reflect.TypeOf((*MockService)(nil).UpdateTransactionById), arg0, arg1, arg2)
}
